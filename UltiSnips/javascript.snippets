
#============================================================================
 #                                                                     NODEJS
#============================================================================
snippet fun "a function" w
function $1 () {
  $0
}
endsnippet

snippet => "a () =>" w
$1 () => {
  $0
}
endsnippet

snippet /** "/**a*/" b
/**
 *  $1
 *
 *
 */
endsnippet

snippet console "console.log('a')" b
console.log($1);
endsnippet

snippet require "const a = require('b')" b
const $1 = require('$1');
endsnippet

snippet then "then() =>" w
then(() => {
  $1
})
endsnippet

snippet catch "catch(err) =>" w
catch((err) => {
  $1
})
endsnippet

snippet pp "increment a(b);" w
$1($2);
endsnippet

snippet else "else {a}" w
else{
  $1
}
endsnippet

snippet req.flash "req.flash(a, b)" b
req.flash('$1', '$2');
endsnippet

snippet res.redirect "res.redirect(a)" b
res.redirect('$1');
endsnippet
#============================================================================
 #                                                                   MONGOOSE
#============================================================================
snippet mongoose.Schema "create schema: mongoose.Schema({a})" b
const $0Schema = mongoose.Schema({
  $1
});
endsnippet

snippet mongoose.model "mongoose model" b
mongoose.model('$1', $2);
endsnippet

snippet mongoose.connect "Mongoose connect URI"
const URI = '$1';
const NOERRO = {
  useUnifiedTopology: true,
  useNewUrlParser: true
};
mongoose.Promise = global.Promise;
mongoose.connect(URI, NOERRO).then(() => {
  console.log("Connect mongo");
}).catch((err) => {
  console.log("Error in connect" + err);
});
endsnippet

snippet new.schema "create a new Schema" b
const $1 = new Schema({
  
});

mongoose.model('', $1);
endsnippet

#============================================================================
 #                                                                    EXPRESS
#============================================================================

snippet app.get "app.get" b
app.get('/$1', (req, res) => {
  
});
endsnippet

snippet router.get "router.get" b
router.get('/$0', (req, res) => {
  $1
});
endsnippet

snippet router.post "router post" b
router.post('/$1', (req, res) => {
  $2
});
endsnippet

snippet res.send "res.send('')" b
res.send($1);
endsnippet

snippet res.render "res.render('a')" b
res.render('$1');
endsnippet


snippet app.use "app.use(a)" b
app.use($1);
endsnippet

snippet express.static "express.static(a)" w
express.static($1)
endsnippet

snippet path.join "path.join(__dirname, 'a')" w
path.join(__dirname, '$1')
endsnippet

snippet express.init "initialized basic connection" b
const express = require('express');
const app = express();

app.get('/',(req, res) => {
  res.send('Main Route');
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log('Server initialized on port : ' + PORT);
});
endsnippet

snippet :: "$1: {}" b
$1: {
  :
}
endsnippet

#============================================================================
 #                                                            EXPRESS-SESSION
#============================================================================

snippet session.init "init express-session" w
app.use(session({
  secret: "$1",
  resave: true,
  saveUninitialized: true
}));
endsnippet

